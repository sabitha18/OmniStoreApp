package com.armada.storeapp.ui.home.instore_transactions.picklist.adapter

import android.content.Context
import android.text.Editable
import android.text.TextWatcher
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.AdapterView
import android.widget.Toast
import androidx.core.text.isDigitsOnly
import androidx.recyclerview.widget.RecyclerView
import com.armada.storeapp.data.model.response.CreatePicklistSkuResponse
import com.armada.storeapp.data.model.response.GetDestinationBinResponse
import com.armada.storeapp.databinding.ItemCreatePicklistBinding
import com.armada.storeapp.ui.home.instore_transactions.picklist.listener.DestinationBinSelectedListener
import com.armada.storeapp.ui.home.instore_transactions.picklist.listener.ItemQuantityListener

class CreatePicklistSkuRecyclerviewAdapter(
    val items: ArrayList<CreatePicklistSkuResponse.PickDetails>,
    destinationBins: ArrayList<GetDestinationBinResponse.BinSubLevel>,
    val context: Context,
    val listener: ItemQuantityListener,
    val destinationBinListener: DestinationBinSelectedListener

) :
    RecyclerView.Adapter<CreatePicklistSkuRecyclerviewAdapter.ViewHolder>() {

    private var itemList: ArrayList<CreatePicklistSkuResponse.PickDetails>? = null
    private var destinationBinList: ArrayList<GetDestinationBinResponse.BinSubLevel>? = null
    private val itemQuantityListener = listener

    init {
        this.itemList = items
        this.destinationBinList = destinationBins
    }

    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        val currentItem = itemList?.get(position)
        val currentPosition = position
        holder.binding.tvSourceBin?.text = currentItem?.sourceBin
        holder.binding.tvItemCode?.text = currentItem?.item
        holder.binding?.tvTotalQty?.text =
            currentItem?.quantity?.toString()
        holder.binding.spinnerDestinationBin.adapter =
            DestinationSpinnerAdapter(context, destinationBinList!!)
        holder.binding.edtMoveQty.addTextChangedListener(object :
            TextWatcher {
            override fun beforeTextChanged(
                text: CharSequence?,
                start: Int,
                count: Int,
                after: Int
            ) {
            }

            override fun onTextChanged(text: CharSequence?, start: Int, before: Int, count: Int) {

            }

            override fun afterTextChanged(text: Editable?) {
                try {
                    if (text?.length!! > 0) {
                        if (text?.toString()?.isDigitsOnly()) {
                            if (text?.toString()?.toInt() > currentItem?.quantity!!) {
                                Toast.makeText(
                                    context,
                                    "Move quantity cannot exceed total quantity",
                                    Toast.LENGTH_SHORT
                                ).show()
                                holder.binding.edtMoveQty?.setText("")
                            } else {
                                currentItem.moveQty = text?.toString()?.toInt()
                                itemQuantityListener.onItemQtyChanged(currentItem, currentPosition)
                            }
                        } else {
                            holder.binding.edtMoveQty?.setText("")
                            Toast.makeText(context, "Please enter valid number", Toast.LENGTH_SHORT)
                                .show()
                        }

                    }
                } catch (exception: Exception) {
                    exception.printStackTrace()
                }

            }

        })

        holder.binding.spinnerDestinationBin.setOnItemSelectedListener(object :
            AdapterView.OnItemSelectedListener {
            override fun onItemSelected(
                parent: AdapterView<*>?,
                view: View,
                position: Int,
                id: Long
            ) {
                try {
                    currentItem?.destinationBin =
                        destinationBinList?.get(position)?.autoGeneratedCode
                    destinationBinListener.onDestinationBinSelected(
                        currentItem!!,
                        currentPosition
                    )
                } catch (exception: Exception) {
                    exception.printStackTrace()
                }
            }

            override fun onNothingSelected(parent: AdapterView<*>?) {}
        })
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        val viewBinding =
            ItemCreatePicklistBinding.inflate(LayoutInflater.from(context), parent, false)

        return ViewHolder(viewBinding)
    }

    override fun getItemCount(): Int {
        if (itemList == null)
            return 0
        return itemList?.size!!
    }


    class ViewHolder(val binding: ItemCreatePicklistBinding) : RecyclerView.ViewHolder(binding.root)


}